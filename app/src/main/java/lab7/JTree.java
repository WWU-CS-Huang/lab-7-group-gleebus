/*
 * Author: Fabien Gardes-Picado & Tyler Eads
 * Date: 2025-06-03
 * Purpose: Lab 7
 * Generated by gradle init function
 */

package lab7;

// JTree is used to construct our code tree, with entries and other JTrees linked together 
public class JTree {
    public Entry root;

    class Entry {
        public Character value;
        public int frequency;
        public Entry leftChild;
        public Entry rightChild;
        public Entry parent;

        Entry(Character v, int f) {
            value = v;
            frequency = f;
        }

        Entry(Character v, int f, Entry left, Entry right) {
            value = v;
            frequency = f;
            leftChild = left;
            rightChild = right;
        }

        public String toString() {
            return (value.toString() + " " + frequency);
        }
    }

    public JTree(Character v, int f) {
        Entry j = new Entry(v, f);
        root = j;
        j.parent = null;
    }

    public JTree(Entry left, Entry right) {
        int combinedFreq = left.frequency + right.frequency;
        Entry j = new Entry(null, combinedFreq, left, right);
        left.parent = j;
        right.parent = j;
        root = j;
        j.parent = null;
    }

    public int getTreeFreq() {
        return root.frequency;
    }

    public String decode(String bitstring) {
        String retString = "";
        Entry currentNode = root;

        while (!(bitstring.equals(""))) {
            // go left
            if (bitstring.charAt(0) == '0') {
                currentNode = currentNode.leftChild;

                // if we have a non-null value, we've reached the leaf
                if (currentNode.value != null) {
                    retString += currentNode.value;
                    currentNode = root;
                }

            // go right
            } else if (bitstring.charAt(0) == '1') {
                currentNode = currentNode.rightChild;

                // if we have a non-null value, we've reached the leaf
                if (currentNode.value != null) {
                    retString += currentNode.value;
                    currentNode = root;
                }

            } else {
                //invalid input
                return "Invalid input";
            }

            bitstring = bitstring.substring(1);
        }
        return retString;
    }    
}
